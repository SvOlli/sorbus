; Copyright (c) 2025 Sven Oliver "SvOlli" Moll
;
; SPDX-License-Identifier: GPL-3.0-or-later
;
; This program implements a 32x32 pixel framebuffer
; for the Sorbus Computer
;
.pio_version 0

; GPIOs in use are
;  0: A0
;  1: A1
; [...]
; 15: A15
; 16: D0
; 17: D1
; [...]
; 23: D7
; 24: R/!W
; 25: CLK

.program bus_wait

.define RW  24
.define CLK 25

.wrap_target
loop:
   wait 0 gpio RW       ; first wait for r/w to go low (write)
   wait 1 gpio CLK  [2] ; now wait for clock to go high (and a bit more)
   in pins, 24          ; bug fixed, this now works!
   ;mov isr, pins        ; just pull all GPIOs to output
   ;push
   wait 0 gpio CLK      ; and wait for clock to go low again
                        ; to prevent too fast reentering
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void bus_wait_program_init( PIO pio, uint sm, uint offset, float freq )
{
   // do not mess with these!
   const uint startpin = 0;
   const uint numpins  = 24;

   pio_gpio_init( pio, startpin );

   // setup pins
   // listen on the pins 0-25 of the bus
   pio_sm_config c = bus_wait_program_get_default_config( offset );
   sm_config_set_in_pin_base( &c, startpin );
   sm_config_set_in_pin_count( &c, numpins );
   pio_sm_set_consecutive_pindirs( pio, sm, startpin, numpins+2, false );

   sm_config_set_fifo_join( &c, PIO_FIFO_JOIN_RX );
   sm_config_set_in_shift( &c, false, true, numpins ); // address+data bus

   // running the PIO state machine 20 times as fast as expected CPU freq
   float div = clock_get_hz( clk_sys ) / (freq * 20);
   sm_config_set_clkdiv( &c, div );

   pio_sm_init( pio, sm, offset, &c );
   pio_sm_set_enabled( pio, sm, true );
}
%}
